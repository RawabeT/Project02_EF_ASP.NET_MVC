// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project01.Data;

namespace Project01.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210604143030_addForignKeyItemCart")]
    partial class addForignKeyItemCart
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Project01.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ItemID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemID");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("Project01.Models.CartModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<int?>("ItemID")
                        .HasColumnType("int");

                    b.Property<string>("ItemName")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.HasIndex("ItemID");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Project01.Models.CustomerModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Fahad ALarifi Street",
                            City = "Hail",
                            Email = "rawabe44u@gmail.com",
                            Name = "Rawabe",
                            Password = "123456",
                            PhoneNumber = "0560396778"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Ahmed ALarifi Street",
                            City = "Abha",
                            Email = "rahaf@gmail.com",
                            Name = "Rahaf",
                            Password = "123456",
                            PhoneNumber = "0560396878"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Younis ALarifi Street",
                            City = "Dammam",
                            Email = "reema@gmail.com",
                            Name = "Reema",
                            Password = "999",
                            PhoneNumber = "0560396798"
                        });
                });

            modelBuilder.Entity("Project01.Models.ItemModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("OrderModelId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("CartId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderModelId");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CartId = 0,
                            CustomerId = 0,
                            Description = "Yallow banana from south africa",
                            Image = "http://cdn.shopify.com/s/files/1/2154/4937/products/banana_600x.jpg?v=1610541466",
                            Name = "Banana",
                            Price = 10m,
                            Quantity = 1,
                            Type = "Fruit"
                        },
                        new
                        {
                            ID = 2,
                            CartId = 0,
                            CustomerId = 0,
                            Description = "Yallow banana from south africa",
                            Image = "http://cdn.shopify.com/s/files/1/2154/4937/products/banana_600x.jpg?v=1610541466",
                            Name = "Banana",
                            Price = 10m,
                            Quantity = 1,
                            Type = "Fruit"
                        });
                });

            modelBuilder.Entity("Project01.Models.OrderModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Project01.Models.CartItem", b =>
                {
                    b.HasOne("Project01.Models.ItemModel", "Item")
                        .WithMany()
                        .HasForeignKey("ItemID");
                });

            modelBuilder.Entity("Project01.Models.CartModel", b =>
                {
                    b.HasOne("Project01.Models.CustomerModel", "Customer")
                        .WithOne("Cart")
                        .HasForeignKey("Project01.Models.CartModel", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project01.Models.ItemModel", "Item")
                        .WithMany()
                        .HasForeignKey("ItemID");
                });

            modelBuilder.Entity("Project01.Models.ItemModel", b =>
                {
                    b.HasOne("Project01.Models.CartModel", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project01.Models.CustomerModel", "Customer")
                        .WithMany("Items")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project01.Models.OrderModel", null)
                        .WithMany("Items")
                        .HasForeignKey("OrderModelId");
                });

            modelBuilder.Entity("Project01.Models.OrderModel", b =>
                {
                    b.HasOne("Project01.Models.CustomerModel", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
